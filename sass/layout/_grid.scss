.row {
    max-width: $grid-width; // disallow width to exceed this parameterized size i.e. 1140px, (to avoid image skewing?) even if screen is huge
    // Note for grid, the following margin property requires `auto` as the second parameter
    // otherwise it doesn't horizontally center correctly when media query activates 1-column mode\
    margin: 2rem auto; // centers a block element within a block element & add left and right margins to avoid crowding on edges
    // border: 1px solid red; // re-enable to debug spacing only

    @include responsive-content(phone-mode) {
        max-width: 90%;
    }


    // pseudo selector to add vertical padding between rows to space out content
    &:not(:last-child) {
        margin-bottom: $grid-gutter-spacing-between-rows;

        @include responsive-content(phone-mode) {
            margin-bottom: $grid-gutter-small-spacing-between-rows;
        }
    }    

    @include clearfix; //?? what does this do?
    [class^="col-"] {
        // background-color: lightcoral; // temporary: remove when visual cue of boundaries is no longer needed
        float: left; // dock all columns to left as part of grid
        // ?? find bug to remove right margin on last column to properly center columns
        &:not(:last-child) {
            margin-right: $grid-gutter-spacing-between-columns; // on all but last column, apply a right margin to space out content on our left floated columns
            
            // in skinny phone mode, we just want two columns maximum
            @include responsive-content(phone-mode) {
                margin-right: 0;
                margin-bottom: $grid-gutter-small-spacing-between-rows;
            }
        }

        // in skinny phone mode, we just want only 1 columns so we say each column takes all of available width
        @include responsive-content(phone-mode) {
            width: 100% !important;
        }        
    }

    .col-1-of-1 {
        width: calc((100% - (0)*#{$grid-gutter-spacing-between-columns})/(1));    
    }

    /* WARNING: Bug/Limitation of calc or CSS to have nested math expression inside a parenthesis to 
                parameterize the number of between gutter spacing between columns.
        width: calc((100% - (2-1)*#{$grid-gutter-spacing-between-columns})/(2));    
        width: calc((100% - calc(2-1)*#{$grid-gutter-spacing-between-columns})/(2));    
        width: calc((100% - (calc(2-1))*#{$grid-gutter-spacing-between-columns})/(2));    
    */
    .col-1-of-2 {
        width: calc((100% - (1)*#{$grid-gutter-spacing-between-columns})/(2));    
    }

    .col-1-of-3 {
        width: calc( (100% - 2*#{$grid-gutter-spacing-between-columns})/3);
    }

    .col-2-of-3 {
        width: calc(2*((100% - 2*#{$grid-gutter-spacing-between-columns})/3) + #{$grid-gutter-spacing-between-columns});
    }

    .col-1-of-4 {
        width: calc((100% - 3*#{$grid-gutter-spacing-between-columns})/4);
    }

    .col-2-of-4 {
        width: calc(2*((100% - 3*#{$grid-gutter-spacing-between-columns})/4) + #{$grid-gutter-spacing-between-columns});
    }
    
    .col-3-of-4 {
        width: calc(3*((100% - 3*#{$grid-gutter-spacing-between-columns})/4) + 2*#{$grid-gutter-spacing-between-columns});
    }
}